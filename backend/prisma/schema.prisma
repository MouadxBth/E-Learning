// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
	ADMIN
	TEACHER
	STUDENT
}

model User {
	email   String @id
	password	String?

	type UserType @default(STUDENT)

	createdAt  DateTime @default(now())
	updatedAt  DateTime @updatedAt

	firstName  String?
	lastName   String?

	avatar     String?

	authoredCourses Course[] @relation("AuthoredCourses")

	authoredReviews Review[] @relation("AuthoredReviews")
}


model Course {
	name	String @id

	title	String

	category String

	description String

	author User @relation("AuthoredCourses", fields: [authorEmail], references: [email], onDelete: Cascade)
	authorEmail String

	chapters Chapter[] @relation("Chapters")

	reviews Review[] @relation("Reviews")
}

model Chapter {
	id Int @id @default(autoincrement())

	title	String

	content String

	course Course @relation("Chapters", fields: [courseId], references: [name], onDelete: Cascade)
	courseId String

	quiz Quiz? @relation("Quiz")
}

model Quiz {
	id Int @id @default(autoincrement())

	title String

	questions Question[] @relation("Questions")

	chapter Chapter @relation("Quiz", fields: [chapterId], references: [id], onDelete: Cascade)
	chapterId Int @unique

}

model Question {
	id Int @id @default(autoincrement())

	content String

	choices String[]

	answer String[]

	quiz Quiz @relation("Questions", fields: [quizId], references: [id], onDelete: Cascade)
	quizId Int
}

model Review {
	id Int @id @default(autoincrement())

	createdAt  DateTime @default(now())
	updatedAt  DateTime @updatedAt

	content String

	author User @relation("AuthoredReviews", fields: [authorEmail], references: [email], onDelete: Cascade)
	authorEmail String

	course Course @relation("Reviews", fields: [courseId], references: [name], onDelete: Cascade)
	courseId String
}